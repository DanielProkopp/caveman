#|
  This file is a part of Caveman package.
  URL: http://github.com/fukamachi/caveman
  Copyright (c) 2011 Eitarow Fukamachi <e.arrows@gmail.com>

  Caveman is freely distributable under the LLGPL License.
|#

(clack.util:namespace caveman.app
  (:use :cl
        :clack
        :clack.builder
        :clack.middleware.static
        :clack.middleware.clsql)
  (:shadow :stop)
  (:import-from :cl-ppcre
                :scan-to-strings)
  (:import-from :cl-fad
                :file-exists-p)
  (:import-from :caveman.middleware.context
                :<caveman-middleware-context>)
  (:import-from :caveman.request
                :request-method
                :path-info
                :parameter)
  (:export :config))

(cl-annot:enable-annot-syntax)

@export
(defclass <app> (<component>)
     ((config :initarg :config :initform nil
              :accessor config)
      (routing-rules :initarg routing-rules :initform nil
                     :accessor routing-rules)
      (acceptor :initform nil :accessor acceptor))
  (:documentation "Base class for Caveman Application. All Caveman Application must inherit this class."))

(defmethod call ((this <app>) req)
  "Overriding method. This method will be called for each request."
  (let* ((method (request-method req))
         (path-info (path-info req)))
    (loop for rule in (reverse (routing-rules this))
          for (meth (re vars) fn) = (cdr rule)
          if (string= meth method)
            do (multiple-value-bind (matchp res)
                   (scan-to-strings re path-info)
                 (when matchp
                   (let ((params
                          (loop for key in vars
                                for val in (coerce res 'list)
                                append (list
                                         (intern (symbol-name key) :keyword)
                                         val))))
                     (setf (slot-value req 'clack.request::query-parameters)
                           (append
                            params
                            (slot-value req 'clack.request::query-parameters)))
                     (return (call fn (parameter req))))))
          finally (return '(404 nil nil)))))

@export
(defun start (app-name
              &key port server debug lazy)
  (load-config app-name)

  (let ((app (symbol-value (intern "*APP*" app-name)))
        (config (symbol-value (intern "*CONFIG*" app-name))))
    (setf *builder-lazy-p* lazy)
    (clackup
     (builder
      (<clack-middleware-static>
       :path "/public/"
       :root (merge-pathnames (getf config :static-path)
                              (getf config :application-root)))
      (<clack-middleware-clsql>
       :database-type (getf config :database-type)
       :connection-spec (getf config :database-connection-spec)
       :connect-args '(:pool t :encoding :utf-8))
      <caveman-middleware-context>
      app)
     :port (or port (getf config :port))
     :debug debug
     :server (or server (getf config :server)))))

@export
(defun stop (acceptor config)
  "Stop a server."
  (clack:stop acceptor :server (getf config :server)))

@export
(defmethod add-route ((this <app>) routing-rule)
  "Add a routing rule to the Application."
  (setf (routing-rules this)
        (delete (car routing-rule)
                (routing-rules this)
                :key #'car))
  (push routing-rule
        (routing-rules this)))

(defun load-config (app-name)
  (let ((config-file (merge-pathnames #p"config.lisp"
                                      (asdf:component-pathname
                                       (asdf:find-system app-name)))))
    (when (file-exists-p config-file)
      (load config-file))))

(doc:start)

@doc:NAME "
Caveman.App - Caveman Application Class.
"

@doc:SYNOPSIS "
    ;; Usually you shouldn't write this code.
    ;; These code will be generated by `caveman.skeleton:generate'.
    (defclass <myapp> (<app>) ())
    (defvar *app* (make-instance '<myapp>
                     :config '(:application-name \"My App\"
                               :application-root #p\"~/public/\"
                               :server :hunchentoot
                               :port 8080)))
    (start *app*)
"

@doc:DESCRIPTION "
Caveman.App provide a base class `<app>' for Caveman Application.

Usually you don't have to cave about this package because `caveman.skeleton:generate' will generate code for you.
"

@doc:AUTHOR "
* Eitarow Fukamachi (e.arrows@gmail.com)
"

@doc:SEE "
* Clack.Component
"
